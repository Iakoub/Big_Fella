#[gcode_macro QUAD_GANTRY_LEVEL]
#rename_existing: _BASE_QUAD_GANTRY_LEVEL
#description: Conform a moving, twistable gantry to the shape of a stationary bed with klicky automount
#gcode:
#    {% set tilting_travel_accel = printer["gcode_macro _USER_VARIABLES"].tilting_travel_accel %}
#    {% set status_leds_enabled = printer["gcode_macro _USER_VARIABLES"].status_leds_enabled %}
#    {% set verbose = printer["gcode_macro _USER_VARIABLES"].verbose %}

#    {% if verbose %}
#        { action_respond_info("Quad gantry leveling") }
#    {% endif %}

#    _CG28
#    ACTIVATE_PROBE
    # Set the tilting acceleration prior to any movement
#    {% set saved_accel = printer.toolhead.max_accel %}
#    M204 S{tilting_travel_accel}
#    _BASE_QUAD_GANTRY_LEVEL {% for p in params %}{'%s=%s ' % (p, params[p])}{% endfor %}
#    SET_VELOCITY_LIMIT ACCEL={saved_accel} # Reset acceleration values to what it was before
#    DEACTIVATE_PROBE
#    G28

[gcode_macro UNLOAD_FILAMENT]
description: Basic unload of the filament (used with M600/CHANGE_FILAMENT)
gcode:
    {% set TEMP = params.TEMP|default(printer["gcode_macro _USER_VARIABLES"].print_default_extruder_temp)|float %}
    {% set DISTANCE = params.DISTANCE|default(35)|float %}

    {% set verbose = printer["gcode_macro _USER_VARIABLES"].verbose %}
    {% set filament_sensor_enabled = printer["gcode_macro _USER_VARIABLES"].filament_sensor_enabled %}
    {% set klippain_mmu_enabled = printer["gcode_macro _USER_VARIABLES"].klippain_mmu_enabled %}
    {% set re_enable_filament_sensor = 0 %}

    SAVE_GCODE_STATE NAME=UNLOAD_FILAMENT_state
    _LOW_TEMP_CHECK T={TEMP}

    _TIP_SHAPING
    M83
    G1 E-20 F3600
    G4 P3000
    G1 E{DISTANCE|float * -1} F3000
    M400

    RESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT_state

[gcode_macro LOAD_FILAMENT]
description: Basic load of the filament (used with M600/CHANGE_FILAMENT)
gcode:
    {% set TEMP = params.TEMP|default(printer["gcode_macro _USER_VARIABLES"].print_default_extruder_temp)|float %}
    {% set DISTANCE = params.DISTANCE|default(50)|float %}

    {% set verbose = printer["gcode_macro _USER_VARIABLES"].verbose %}
    {% set filament_sensor_enabled = printer["gcode_macro _USER_VARIABLES"].filament_sensor_enabled %}
    {% set klippain_mmu_enabled = printer["gcode_macro _USER_VARIABLES"].klippain_mmu_enabled %}
    {% set re_enable_filament_sensor = 0 %}


    M117 Loading Filament
    SAVE_GCODE_STATE NAME=LOAD_FILAMENT_state
    _LOW_TEMP_CHECK T={TEMP}
    TEMPERATURE_WAIT SENSOR={printer.toolhead.extruder} MINIMUM={TEMP}
    M83
    G92 E0
    G1 E{DISTANCE|float} F300
    G1 E50 F250
    M400
    M117 Loading done

    G92 E0
    RESTORE_GCODE_STATE NAME=LOAD_FILAMENT_state

[gcode_macro CLEAN_NOZZLE]
description: Wipe the nozzle on the brush
gcode:
    {% set purge_and_brush_enabled = printer["gcode_macro _USER_VARIABLES"].purge_and_brush_enabled %}
    {% set purgeclean_servo_enabled = printer["gcode_macro _USER_VARIABLES"].purgeclean_servo_enabled %}
    {% set status_leds_enabled = printer["gcode_macro _USER_VARIABLES"].status_leds_enabled %}
    {% set brush_clean_accel = printer["gcode_macro _USER_VARIABLES"].brush_clean_accel %}
    {% set brush_over_y_axis = printer["gcode_macro _USER_VARIABLES"].brush_over_y_axis %}
    {% set verbose = printer["gcode_macro _USER_VARIABLES"].verbose %}

    {% if purge_and_brush_enabled %}
        {% set St = printer["gcode_macro _USER_VARIABLES"].travel_speed * 60 %}
        {% set Sz = printer["gcode_macro _USER_VARIABLES"].z_drop_speed * 60 %}
        {% set Sc = printer["gcode_macro _USER_VARIABLES"].brush_clean_speed * 60 %}

        {% set Bx, By, Bz = printer["gcode_macro _USER_VARIABLES"].brush_xyz|map('float') %}

        {% if verbose %}
            RESPOND MSG="Nozzle cleaning..."
        {% endif %}

        # Set the cleaning acceleration prior to any movement
        {% set saved_accel = printer.toolhead.max_accel %}
        _CG28
        M204 S{brush_clean_accel}

        # Move to purge zone (left side)
        G90
    #    _CONDITIONAL_MOVE_TO_PURGE_BUCKET Z_DROP=1
        # Move to center of the brush
        G1 Z5 F4000
        G1 X{Bx} Y{By} F{St}
        G1 Z{Bz} F{St}
        # Wipe procedure
        G91
        {% if brush_over_y_axis %}
            {% for wipe in range(6) %}
                G1 Y-1.5 F{Sc}
                G1 Y+1.5 F{Sc}
            {% endfor %}
        {% endif %}

        G1 X+20 F{Sc}

        {% for wipe in range(6) %}
            G1 X-35 F{Sc}
            G1 X+35 F{Sc}
        {% endfor %}

        G90
        G28 Z0

        # Reset acceleration values to what it was before
        SET_VELOCITY_LIMIT ACCEL={saved_accel}
    {% endif %}

[gcode_macro END_PRINT]
description: Stop the print and filter the atmosphere for 10min before shuting down
gcode:
    {% set disable_motors_in_end_print = printer["gcode_macro _USER_VARIABLES"].disable_motors_in_end_print %}
    {% set turn_off_heaters_in_end_print = printer["gcode_macro _USER_VARIABLES"].turn_off_heaters_in_end_print %}
    {% set safe_extruder_temp = printer["gcode_macro _USER_VARIABLES"].safe_extruder_temp|float %}
    {% set light_intensity_end_print = printer["gcode_macro _USER_VARIABLES"].light_intensity_end_print %}
    {% set klippain_mmu_enabled = printer["gcode_macro _USER_VARIABLES"].klippain_mmu_enabled %}
    {% set mmu_unload = params.MMU_UNLOAD_AT_END|default(printer["gcode_macro _USER_VARIABLES"].mmu_unload_on_end_print)|default(0)|int %}
    {% set filter_enabled = printer["gcode_macro _USER_VARIABLES"].filter_enabled %}
    {% set bed_mesh_enabled = printer["gcode_macro _USER_VARIABLES"].bed_mesh_enabled %}
    {% set filter_default_time = printer["gcode_macro _USER_VARIABLES"].filter_default_time_on_end_print|default(600)|int %}

    {% if printer.extruder.can_extrude %}
        # pull back the filament a little bit
        G92 E0
        G1 E-10 F2100
    {% endif %}

    PARK
    TURN_OFF_HEATERS

    M107
    M400
    BED_MESH_CLEAR

    {% if disable_motors_in_end_print %}
        M84
    {% endif %}
    # If a filter is connected, and used during the print, continue filtering the air
    # for a couple of min before stopping everything
    {% if filter_enabled %}
        {% if printer['fan_generic filter'].speed > 0 %}
            {% set FILTER_TIME = params.FILTER_TIME|default(filter_default_time)|int %}
            START_FILTER SPEED=1
            UPDATE_DELAYED_GCODE ID=_STOP_FILTER_DELAYED DURATION={FILTER_TIME}
        {% endif %}
    {% endif %}
    AURORA

[gcode_macro CHANGE_NOZZLE]
gcode:
    M117 Nozzle change
    M104 S240
    M109 S240 ;Heat up the filament
    M83                            ; set extruder to relative
    G1 E5 F250                   ; extrude 5 mm
    G1 E-50 F2000                ; retract 5 cm
    M82                            ; set extruder to absolute
    CLEAN_NOZZLE
    G90 ; Absolute pos
    G1 X200 Y0 Z150 F4250 ; Move to front
    M117 Ready to swap

[gcode_macro START_FILTER]
gcode:
    {% set SPEED = params.SPEED|default(1)|float %}

    {% set filter_name = printer["gcode_macro _USER_VARIABLES"].filter_name %}
    SET_FAN_SPEED FAN={filter_name} SPEED={SPEED}


[gcode_macro STOP_FILTER]
gcode:
    {% set filter_name = printer["gcode_macro _USER_VARIABLES"].filter_name %}
    SET_FAN_SPEED FAN={filter_name} SPEED=0


[delayed_gcode _STOP_FILTER_DELAYED]
gcode:
    STOP_FILTER

[gcode_macro M109]
rename_existing: M99109
gcode:
    #Parameters
    {% set s = params.S|float %}
    
    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  ; Set hotend temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s-2} MAXIMUM={s+2}   ; Wait for hotend temp (within 1 degree)
    {% endif %}

[gcode_macro M190]
rename_existing: M99190
gcode:
    #Parameters
    {% set s = params.S|float %}

    M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}   ; Set bed temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s} MAXIMUM={s+1}  ; Wait for bed temp (within 1 degree)
    {% endif %}        

[gcode_macro PRINT_STATUS]
gcode: 
  RESPOND TYPE='echo' MSG="Status for M190 {params.OBJ} is { printer[params.OBJ] }"

[gcode_macro PROBE_CALIBRATE]
gcode:
    CARTOGRAPHER_CALIBRATE

[gcode_macro Carto_QGL] # safer and faster QGL for Cartographer
gcode:
    _CG28 # or use a conditional or safe homing
    QUAD_GANTRY_LEVEL horizontal_move_z=10 retries=0 retry_tolerance=1.000
    QUAD_GANTRY_LEVEL horizontal_move_z=3
    G28 Z