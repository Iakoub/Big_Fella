
[homing_override] #Klippain
axes: xyz
gcode:
    {% set verbose = printer["gcode_macro _USER_VARIABLES"].verbose %}
    {% set probe_type_enabled = printer["gcode_macro _USER_VARIABLES"].probe_type_enabled %}
    {% set homing_zhop = printer["gcode_macro _USER_VARIABLES"].homing_zhop|float|abs %}
    {% set homing_travel_speed = printer["gcode_macro _USER_VARIABLES"].homing_travel_speed * 60 %}
    {% set homing_travel_accel = printer["gcode_macro _USER_VARIABLES"].homing_travel_accel %}
    {% set z_driver = printer["gcode_macro _USER_VARIABLES"].z_driver %}
    {% set z_drop_speed = printer["gcode_macro _USER_VARIABLES"].z_drop_speed * 60 %}
    {% set status_leds_enabled = printer["gcode_macro _USER_VARIABLES"].status_leds_enabled %}
    {% set bed_mesh_enabled = printer["gcode_macro _USER_VARIABLES"].bed_mesh_enabled %}

    {% set homing_first = printer["gcode_macro _USER_VARIABLES"].homing_first|string|upper %}
    {% set x_homing_backoff, y_homing_backoff = printer["gcode_macro _USER_VARIABLES"].homing_backoff_distance_xy|map('float') %}

    {% set x_position_endstop = printer["configfile"].config["stepper_x"]["position_endstop"]|float %}
    {% set y_position_endstop = printer["configfile"].config["stepper_y"]["position_endstop"]|float %}
    {% set x_position_center = printer.toolhead.axis_maximum.x|int/2 - printer.toolhead.axis_minimum.x|int/2 %}
    {% set y_position_center = printer.toolhead.axis_maximum.y|int/2 - printer.toolhead.axis_minimum.y|int/2 %}

#    INITIALIZE_TOOLCHANGER  #TC Code
    STOP_TOOL_PROBE_CRASH_DETECTION #TC Code

    # reset parameters
    {% set X, Y, Z = False, False, False %}

    SET_GCODE_OFFSET X=0.0 Y=0.0 Z=0.0
    # which axes have been requested for homing
    {% if not 'X' in params
        and not 'Y' in params
        and not 'Z' in params %}
        {% set X, Y, Z = True, True, True %}
    {% else %}
        {% if 'X' in params %}
            {% set X = True %}
        {% endif %}

        {% if 'Y' in params %}
            {% set Y = True %}
        {% endif %}

        {% if 'Z' in params %}
            {% set Z = True %}
        {% endif %}

        {% if 'X' in params
            and 'Y' in params
            and 'Z' in params %}
            # reset homing state variables
            # if homing all axes
            _HOMING_VARIABLES reset=1
            {% endif %}
    {% endif %}

    # Set the homing acceleration prior to any movement
    {% set saved_accel = printer.toolhead.max_accel %}
    M204 S{homing_travel_accel}
    G90

    {% if Z %}
        {% if ('z' in printer.toolhead.homed_axes) %}
            {% if (printer.toolhead.position.z < homing_zhop) %}
                {% if verbose %}
                    { action_respond_info("Z too low, performing ZHOP to rehome Z") }
                {% endif %}
                G91
                G0 Z{homing_zhop} F{z_drop_speed}
                G90
            {% else %}
                {% if verbose %}
                    { action_respond_info("Z already safe, no ZHOP needed to rehome Z") }
                {% endif %}
            {% endif %}
        {% elif ('xy' in printer.toolhead.homed_axes) %}
            {% if verbose %}
                { action_respond_info("X and Y already homed, no ZHOP needed to home Z") }
            {% endif %}
        {% else %}
            {% if verbose %}
                { action_respond_info("X and Y not homed, forcing full G28 to home Z properly") }
            {% endif %}
            SET_KINEMATIC_POSITION X=0 Y=0 Z=0
            G0 Z{homing_zhop} F{z_drop_speed}
            {% set X, Y, Z = True, True, True %}
        {% endif %}
    {% endif %}

    {% if homing_first == "Y" %}
        {% if Y %} # Home y
            {% if verbose %}
                { action_respond_info("Homing Y") }
            {% endif %}
            G28 Y0
            G1 Y{y_position_endstop + y_homing_backoff} F{homing_travel_speed}
        {% endif %}    
        {% if X %} # Home x
            {% if verbose %}
                { action_respond_info("Homing X") }
            {% endif %}
            SET_TMC_FIELD STEPPER=stepper_x FIELD=SGTHRS VALUE=134
            {% set old_current_x = 1.414 %}
            {% set old_current_y = 1.414 %}
            {% set new_current_x = 0.75 * old_current_x %}
            {% set new_current_y = 0.75 * old_current_y %}
            SET_TMC_CURRENT STEPPER=stepper_x CURRENT={new_current_x}
            SET_TMC_CURRENT STEPPER=stepper_y CURRENT={new_current_y}
            M400
            G28 X0
            G1 X{x_position_endstop + x_homing_backoff} F{homing_travel_speed}
            M400
            SET_TMC_CURRENT STEPPER=stepper_x CURRENT={old_current_x}
            SET_TMC_CURRENT STEPPER=stepper_y CURRENT={old_current_y}
        {% endif %}
    {% endif %}

    {% if Z %} # Home z
        {% if verbose %}
            { action_respond_info("Homing Z") }
        {% endif %}
        # If there is a virtual probe endstop (ie. TAP or inductive as virtual), we go to the center of the bed
        # If the Z endstop is not virtual, then we just move to it
        {% if printer["configfile"].config["stepper_z"]["endstop_pin"]|lower == "probe:z_virtual_endstop" %}
            ACTIVATE_PROBE
            # If there is a bed_mesh enabled and a zero_reference_position set, we retrieve it to home on it
            # Else, we default to the center of the bed
            {% if not bed_mesh_enabled or not printer["configfile"].config["bed_mesh"]["zero_reference_position"] %}
                G0 X{x_position_center} Y{y_position_center} F{homing_travel_speed}
            {% else %}
                {% set ZRPx, ZRPy = printer["configfile"].config["bed_mesh"]["zero_reference_position"].split(',')|map('trim')|map('float') %}
                G0 X{ZRPx} Y{ZRPy} F{homing_travel_speed}
            {% endif %}
        {% else %} # Else, go to the Z endstop physical pin
            _GOTO_Z_PROBE
        {% endif %}
        G28 Z0
        G91
        {% if printer["configfile"].settings["stepper_z"]["homing_positive_dir"] == False %}
            G0 Z{homing_zhop} F{z_drop_speed} # small Z hop to avoid grinding the bed (as we should be close to Z0 right now)
        {% elif printer["configfile"].settings["stepper_z"]["homing_positive_dir"] == True %}
            G0 Z-{homing_zhop} F{z_drop_speed} # small Z move in the opposite direction to avoid staying on the endstop (not dangerous since we should be at Z max)
        {% endif %}
        G90

        DEACTIVATE_PROBE
        _ADJUST_Z_HOME_FOR_TOOL_OFFSET
    {% endif %}

    # Reset acceleration values to what it was before
    SET_VELOCITY_LIMIT ACCEL={saved_accel}
    _APPLY_ACTIVE_TOOL_GCODE_OFFSETS
    M400

[gcode_macro _ADJUST_Z_HOME_FOR_TOOL_OFFSET]
gcode:
      G90 ; absolute mode
      G0 Z10 F1000
      {% set tool = printer.toolchanger.tool %}
      {% if tool %}
         {% set tool_z_offset = printer[tool].gcode_z_offset %}
         {% set probe_z_offset = printer.tool_probe_endstop.active_tool_probe_z_offset %}
         SET_KINEMATIC_POSITION Z={10.0+tool_z_offset|float+probe_z_offset|float}
      {% endif %}

[gcode_macro _APPLY_ACTIVE_TOOL_GCODE_OFFSETS]
gcode:
    ; Apply gcode offsets
    {% set tool = printer.toolchanger.tool %}
    {% if tool %}
      SET_GCODE_OFFSET X={printer[tool].gcode_x_offset} Y={printer[tool].gcode_y_offset} Z={printer[tool].gcode_z_offset}
    {% endif %}

[gcode_macro BED_MESH_CALIBRATE]
rename_existing: _BASE_BED_MESH_CALIBRATE
description: Perform Mesh Bed Leveling with klicky automount
gcode:
    {% set verbose = printer["gcode_macro _USER_VARIABLES"].verbose %}
    {% set probe_type_enabled = printer["gcode_macro _USER_VARIABLES"].probe_type_enabled %}
    {% set tool_z_offset = -0.625 %}

    {% if verbose %}
        { action_respond_info("Bed Mesh Calibrate") }
    {% endif %}
    _CG28
    ACTIVATE_PROBE
    SET_KINEMATIC_POSITION Z={10.0-tool_z_offset|float}
    _BASE_BED_MESH_CALIBRATE  {% for p in params %}{'%s=%s ' % (p, params[p])}{% endfor %}
    G0 Z10 F1000
    SET_KINEMATIC_POSITION Z={10.0+tool_z_offset|float}
    DEACTIVATE_PROBE    